############################################################
## alias & function
############################################################


#### less
alias less="$PAGER"
alias m=less
alias -g L="| less"
alias -g M="| less"
alias les="less"        # for typo

#### man
if which jman >& /dev/null; then
  alias man="LC_ALL=ja_JP.UTF8 jman"
fi

#### ps
if [ $ARCHI = "irix" ]; then
  alias psa='ps -ef'
else; 
  alias psa='ps auxw'
fi

function pst() {                # CPU 使用率の高い方から8つ
  psa | head -n 1
  psa | sort -r -n +2 | grep -v "ps -auxww" | grep -v grep | head -n 8
}
function psm() {                # メモリ占有率の高い方から8つ
  psa | head -n 1
  psa | sort -r -n +3 | grep -v "ps -auxww" | grep -v grep | head -n 8
}
function psg() {
  psa | head -n 1
  psa | grep $* | grep -v "ps -auxww" | grep -v grep
}

#### ls
#### dircolor
if (which gdircolors >& /dev/null) && [ -e $HOME/.dircolors ]; then
  eval `gdircolors -b $HOME/.dircolors` # 色の設定
fi
if which gnuls >& /dev/null ; then
  alias ls="gnuls -F --color=auto --show-control-char"
  alias lscolor='gnuls -F --color=always --show-control-char'
  # 補完リストをカラー化
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
  #zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} でも良さげ
elif [ $ARCHI = "linux" ]; then
  alias ls="ls -F --color=auto --show-control-char"
  alias lscolor='ls -F --color=always --show-control-char'
  # 補完リストをカラー化
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
else
  alias ls="ls -G -w"
  alias lscolor='ls -G -w'
    if [ $TERM = "xterm-color" ]; then
    export LSCOLORS="gxfxcxdxbxegedabagacgx"
    fi
fi
alias kls='ls'
alias qls='ls' # Shift-PageUp を抜けるのについ q を打ってしまうのを回避
alias sl='ls'
alias s='ls'
alias lf='ls'
alias l='ls'
alias la='ls -a'
alias ll='ls -al'
function lsl() { lscolor $* | less }
function lll() { lscolor -la $* | less }
alias sudo='sudo '
#### command
alias df='df -h'
if [ $ARCHI = "linux" ]; then
  alias du='du -h --max-depth=1' # 人間に読める表示で, 深さ1の階層まで表示
else
  alias du='du -h -d 1'          # 人間に読める表示で, 深さ1の階層まで表示
fi
alias mv='mv -iv'
#alias  memo    'skkfep -viesc -e jvim3 ~/memo.txt'
function kterm() { /usr/X11R6/bin/kterm -sb -sl 500 -km euc -title kterm@$HOST $* & }
function mlterm() { command mlterm --term=mlterm $* & }
alias mutt='mutt -f ~/Maildir/inbox'
alias xcalc='xcalc &'
alias xterm='xterm &'
#alias w3m="LANG='ja_JP.EUC' w3m -X"
alias xinit='ssh-agent xinit'
alias bell="echo '\a'"
alias scr="screen -xR"
alias screen="screen -xRR"
alias tscreen="tscreen -xRR"


# short name
alias h='head'
alias t='tail'
alias g='grep'
alias j='jobs'

## global alias
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g C='| cat -n'
alias -g W='| wc'
alias -g ....='../..'
alias -g each_alphabet="a b c d e f g h i j k l m n o p q r s t u v w x y z"
alias -g each_ALPHABET="A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
alias -g each_hiragana="あ い う え お か き く け こ さ し す せ そ\
  た ち つ て と な に ぬ ね の は ひ ふ へ ほ ま み む め も\
  や ゆ よ ら り る れ ろ わ を ん"
alias -g each_katakana="ア イ ウ エ オ カ キ ク ケ コ サ シ ス セ ソ\
  タ チ ツ テ ト ナ ニ ヌ ネ ノ ハ ヒ フ ヘ ホ マ ミ ム メ モ\
  ヤ ユ ヨ ラ リ ル レ ロ ワ ヲ ン"
#for example, for i in alphabet ; mv $i* $i/


function cd() { builtin cd $@ && ls; }
alias cd..='cd ..'
alias cd../='cd ..'
#function emacs() {command emacs $* &}
alias emasc=emacs
function gv() { command gv $* & }
function gimp() { command gimp $* & }
function mozzila() { command mozilla $* & }
function xdvi() { command xdvi $* & }
function mpg321() { command mpg321 -s $* | esdcat & }
function h() { history $* | head -29 | less }
function howm.rb () { nice command howm.rb $* -y -t -H | w3m -T text/HTML }
alias cp='cp -iv'
alias dos2unix="nkf --unix -O --overwrite" # euc-jp, LF
alias unix2dos="nkf --windows -O --overwrite" # shift-jis, CRLF

# bell
function cvsup()       { command cvsup $*       ; echo '\a' }
function make()        { command make $*        ; echo '\a' }
function pkgdb()       { command pkgdb $*       ; echo '\a' }
function portinstall() { command portinstall $* ; echo '\a' }
function emerge()      { command emerge $*      ; echo '\a' }
function rsync()       { command rsync $*       ; echo '\a' }
function tar()         { command tar $*         ; echo '\a' }
function ./configure() { command ./configure $* ; echo '\a' }

function dd()          { command dd $*          ; echo '\a' }

function rm() {
  if [ -d ~/.trash ]; then
    local DATE=`date "+%y%m%d-%H%M%S"`
    mkdir ~/.trash/$DATE
    for i in $@; do
      # 対象が ~/.trash/ 以下なファイルならば /bin/rm を呼び出したいな
      if [ -e $i ]; then
        mv $i ~/.trash/$DATE/
      else 
        echo "$i : not found"
      fi
    done
  else
    /bin/rm $@
  fi
}

function finalgrep () {
  local GREPWORD=$1
  shift
  for i in $* ; do
    grep --with-filename $GREPWORD $i | tail -n 1
  done
}

function google() {
  local str opt 
  if [ $# != 0 ]; then # 引数が存在すれば
    for i in $*; do
      str="$str+$i"
    done    
    str=`echo $str | sed 's/^\+//'` #先頭の「+」を削除
    opt='search?num=50&hl=ja&ie=euc-jp&oe=euc-jp&lr=lang_ja'
    #opt='search?num=50&hl=ja&ie=utf-8&oe=utf-8&lr=lang_ja'
    opt="${opt}&q=${str}"
  fi
  w3m http://www.google.co.jp/$opt #引数がなければ $opt は空になる
  # mozilla -remote openURL\(http::/www.google.co.jp/$opt\) # 未テスト
}
alias ggl=google

function wiki() {
  local str
  if [ $# = 0 ]; then # 引数が存在すれば
    str="特別:Random"
  else
    str=$*
  fi
  w3m http://ja.wikipedia.org/wiki/`echo $str | nkf -w` # utf-8 に変換
}
alias wk=wiki

function jpguess() { # 日本語文字コードを推測
  echo "use nkf -g"
  #for i in $* ; do ; echo -n $i ; cat $i | coco -q ; done
  #utf-8 ファイルを食わせると *sjis*unix と答える
  #見分けついてへんっぽい
}


for target in java "c" "h" "C" cpp txt xml
do
 alias -s ${target}=zsh_pager
done

for target in html xhtml
do
 alias -s ${target}=zsh_wevbbrowser
done

for target in gif jpg jpeg png bmp
do
 alias -s ${target}=zsh_imageviewer
done

for target in mp3 m4a ogg
do
 alias -s ${target}=zsh_audioplayer
done

for target in mpg mpeg avi mp4v
do
 alias -s ${target}=zsh_movieplayer
done

zsh_pager()
{
 $(zsh_commandselector
  "${PAGER} lv less more cat") ${@+"$@"}
}

zsh_wevbbrowser()
{
 $(zsh_commandselector
  "firefox opera konqueror epiphany less") ${@+"$@"}
}

zsh_imageviewer()
{
 $(zsh_commandselector
  "gthumb imageviewer gqview kview eog display") ${@+"$@"}
}

zsh_audioplayer()
{
 $(zsh_commandselector
  "amarok audacious beep-media-player xmms2 xmms noatun") ${@+"$@"}
}

zsh_movieplayer()
{
 $(zsh_commandselector
  "svlc gmplayer totem xine realplay") ${@+"$@"}
}

zsh_commandselector()
{
 for command in $(echo ${1})
  do
   if type "${command}" > /dev/null 2>&1
   then
    echo "${command}"
    break
   fi
  done
}
